{"pages":[{"title":"API v1.0.144 Release Notes","text":"Bug fix: Impersonation failed with 500 when Roles were not provided. Bug fix: Inventory validation was incorrectly occurring in a few specific scenarios involving editing a submitted order. Bug fix: Suppliers were unable to list Product-Spec assignments for products they own.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v10144-release-notes.html"},{"title":"API v1.0.140 Release Notes","text":"This release adds the same Elasticsearch-driven Premium Search features to GET v1/products that are currently only available in GET v1/me/products . Initially, this will only affect a small group of beta customers, but we will be rolling it out to everyone in the coming days/weeks. Please review this blog post carefully, especially regarding the changes in search behavior , as it will now be relevant to \"admin\" product lists. Contact Four51 if you have any questions or concerns.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v10140-release-notes.html"},{"title":"API v1.0.134 Release Notes","text":"Bug fix: PATCHing any string property where only the casing of the string changes will stick. Bug fix: Suppliers can add their own ship-from Address to a Product without receiving an error. Bug fix: Line items on a submitted order can be PATCHed without error after the corresponding Product has been deleted.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v10134-release-notes.html"},{"title":"API v1.0.133 Release Notes","text":"Suppliers can create/edit/manage Specs under v1/specs/* endpoints. Sellers cannot see Supplier-created specs, except in relation to Products that they have been assigned to. New endpoint: GET v1/products/{productID}/specs . Previously available only under me/products , it is now possible to list specs associated with a product from an \"admin\" perspective. Spec model returned from any endpoint now contains an Options collection. (Also previously available only under me endpoints.)","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v10133-release-notes.html"},{"title":"API v1.0.131 Release Notes","text":"New Orders endpoint: POST v1/orders/direction/{orderID}/complete - Changes an order's Status from Open to Complete , without the need to create Shipments. Note that this action is irreversable, i.e. Status cannot be reverted to Open by removing Shipments, for example. New Orders endpoint: POST v1/orders/direction/{orderID}/validate - Performs validation on the current state of an unsubmitted order. For example, verifies that Inventory is sufficient (if enforced) and any applied Promotions are still valid. Returns HTTP status 204 (No Content) if the order is valid, otherwise 400 with an array of error objects (much like what would be returned if attempting to submit an invalid order). OpenAPI 3.0 spec exposed at v1/openapi/v3 . 2.0 spec also exposed at v1/openapi/v2 , which is identical to v1/swagger . The latter endpoint should be considered deprecated and will likely be removed in a future release. New property on OpenIdConnect model: UrlEncoded . Set to true to configure for identity providers that only support passing credentials via application/x-www-form-urlencoded formatted body content.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v10131-release-notes.html"},{"title":"API v1.0.130 Release Notes","text":"New Orders endpoint: POST v1/orders/incoming/{orderID}/split - Creates outgoing Order(s) to Supplier(s), one per unique DefaultSupplierID on the products ordered. New Orders endpoint: POST v1/orders/incoming/{orderID}/forward - Same as /split , but also sumbits the outgoing Orders created. New Product property: AutoForward - If true, indicates to automatically trigger /forward when a Buyer submits an Order containing this Product. New Order property: ToCompanyID , primarily useful to Sellers with outgoing Orders to multiple Suppliers. /split and /forward both return a response that looks like this: { \"OutgoingOrders\": [ ... ], \"RemainingLineItemIDs\": [ ... ] }","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v10130-release-notes.html"},{"title":"API v1.0.128 Release Notes","text":"This is the first of a series of feature releases expanding the capabilities of Suppliers in OrderCloud. It is part of a larger vision of enabling Marketplaces, where independent Suppliers (who typically own product catalogs) can interact with independent Sellers (who typically own relationships with Buyers). Specifically, this release introduces Supplier-Owned Products and Catalogs . New property on both Product and Catalog : OwnerID . This is the ID of the organization (Seller or Supplier) that created the Product or Catalog. Read-only. Potentially useful to Sellers as a list filter. NOT visible to Buyers via /me endpoints. Sellers can see all Supplier-owned Products and Catalogs in their network, but cannot edit them. Sellers can assign Supplier-owned Catalogs to their Buyers in their entirety. Sellers can cherry-pick Supplier-owned Products to add to their own (Seller-owned) Catalogs.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v10128-release-notes.html"},{"title":"API v1.0.126 Release Notes","text":"Bugfix: Regression allowed Buyers with only Shopper role to see inactive Products in some scenarios. Bugfix: Buyer-created shipping address can be used on manually created shipment. Misc. performance enhancements.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v10126-release-notes.html"},{"title":"API v1.0.123 Release Notes","text":"Improved performance of buyer-side product cache refreshes triggered by product changes. Custom roles can now be added to an impersonation token request. Bugfix: Paged lists of Category-Product assignments could be sorted unpredictably if ListOrer is missing or non-unique. Misc. performance enhancements.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v10123-release-notes.html"},{"title":"API v1.0.120 Release Notes","text":"Elasticsearch enabled for all new sellers. Significant improvements to early detection and self-correction of certain types of performance issues.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v10120-release-notes.html"},{"title":"API v1.0.117 Release Notes","text":"Address.CompanyName is now searchable Bugfix: Newly enabled inventory on a product would sometimes cause order submit to fail. MinQuantity & MaxQuantity now returned in error data when line item quantity is invalid. Minor bug fixes and performance enhancements.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v10117-release-notes.html"},{"title":"API v1.0.109 Release Notes","text":"New feature: SecurityProfile.PasswordConfig.ExpireInDays for enforcing password expiration. New feature: Promotion.AllowAllBuyers for allowing all of a Seller's Buyer to see/use a Promotion without explicit assignments. Bugfix: When a Buyer is deleted, immediately creating a new User in a different Buyer with a Username from the deleted Buyer will not cause a conflict error. Minor bug fixes and performance enhancements.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v10109-release-notes.html"},{"title":"API v1.0.107 Release Notes","text":"New API resources for creating/managing Security Profiles (functionality previously only available via Dev Center UI). New API resources for creating/managing custom Roles. Bugfix: With Premium Search, creating a new Buyer with DefaultCatalogID set to an existing catalog did not trigger a search index rebuild. Therefore, Users under the new Buyer could not see products until some other triggering action occurred. Bugfix: For Suppliers, DateCreated was updated whenever the Supplier was updated. Should only get set once on create.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v10107-release-notes.html"},{"title":"API v1.0.105 Release Notes","text":"Planned to be Released to Production on 6/6/2019. New API resources for creating/managing Webhooks (functionality previously only available via Dev Center UI). New API resources for creating/managing xp indexes (functionality previously only available via Dev Center UI). New read-only field on User model: DateCreated (UTC) Bugfix: When 2 variants of 2 different products have exactly the same combination of spec values, and buyer selects variant by specs, sometimes the variant of the incorrect product was added to order. Premium Search enabled by default for all newly created Buyers of Sellers who are Premium Search-enabled.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v10105-release-notes.html"},{"title":"API v1.0.100 Release Notes","text":"Planned to be Released to Production on 4/29/2019. Better internal logging for ops and client support teams. Improved reliability of Webhook delivery. Note that this is a redo of release 1.0.99, which included the items above but was rolled back due to performance issues. The cause of those issues has been identified and corrected.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v10100-release-notes.html"},{"title":"API v1.0.99 Release Notes","text":"Planned to be Released to Production on 4/17/2019. Better internal logging for ops and client support teams. Improved reliability of Webhook delivery.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v1099-release-notes.html"},{"title":"API v1.0.98 Release Notes","text":"Planned to be Released to Production on 4/16/2019. New API endpoints for enabling and configuring OpenID Connect-based authentication. New API endpoints for creating and configuring Message Senders.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v1098-release-notes.html"},{"title":"API v1.0.96 Release Notes","text":"Planned to be Released to Production on Wednesday, March 20th, 2019. Add instrumentation for performance monitoring and logging tools.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v1096-release-notes.html"},{"title":"API v1.0.95 Release Notes","text":"Planned to be Released to Production on Tuesday, March 12th, 2019. BUGFIX: An error was thrown in the rules engine when multiple items.any/all/total functions are and 'd or or 'd together, preventing promos/approval rules with those expressions from being created. General performance enhancements.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v1095-release-notes.html"},{"title":"API v1.0.94 Release Notes","text":"Planned to be Released to Production on Thursday, March 7th, 2019. BUGFIX: With Premium Search, if price is updated, change was not reflected immediately in me/products . BUGFIX: With Premium Search, if product inventory (and nothing else) is updated, change was not reflected immediately in me/products . When product inventory is enabled but QuantityAvailable is unset, it is returned as 0 rather than null . General performance enhancements.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v1094-release-notes.html"},{"title":"API v1.0.93 Release Notes","text":"Planned to be Released to Production on Monday, February 11th, 2019. Bugs We had a couple of issues where, if an admin user updated something on the Seller side, the change was not immediately reflected when a buyer user used the buyer ( me ) endpoints. This has now been resolved. Price Schedules was affected, but prices should be reflected in buyer endpoints much more quickly. Product Inventory Quantity was also affected, but should be fixed. The maximum results that List calls can return on one page is 100. ( PageSize=100 ) However, we realized we had a couple endpoints that were allowing 1000 results per page. We have closed this loophole, particularly for GET v1/products/assignments . Features We did some back end refactoring of Search 2.0 to improve performance and reliability, particularly around the use of complicated logic filters for values.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v1093-release-notes.html"},{"title":"API v1.0.92 Release Notes","text":"Released to Production February 1st, 2019. Release consisted of a bug fix for Search 2.0 customers. We discovered that filter values using Search 2.0 were inadvertently case-sensitive. This has now been changed. me/products?Description|Name=*vol* will now return products with VOL, Vol, or any other case permutation in the Product Description or Product Name. As this is a Search 2.0 related item, you will only see a different if your application is using Search 2.0. Search 2.0 is only enabled on the me/products endpoint as well. Filter names continue to be case-sensitive, as they are properties of the product. Using me/products?description|name=*vol* will return nothing, as those are not properties.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v1092-release-notes.html"},{"title":"API v1.0.91 Release Notes","text":"Production Release Planned for Saturday, January 19th, 2019 at 7:00 PM. Summary Added Multi-Field OR filters to me/products endpoint for Search 2.0 enabled orgs. Updates Multi-Field OR Filters On Me/Products & Search 2.0 Orgs Previously, with filters there was no way to specify multiple fields and get results back when any match. This is now supported with syntax like: me/products?ID|Name|Description=*foo* This will return any product with foo in the ID, Name, or Description. This functionality is currently limited to the me/products endpoint in orgs with Search 2.0 enabled. We're hoping that this will facilitate ease of transfer to the new search platform. Note that field names are case sensitive!","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v1091-release-notes.html"},{"title":"API v1.0.90 Release Notes","text":"Production Release Planned for Monday, January 14th, 2019 at 7:30 PM. Summary Several bug fixes and performance improvements, for apps using both the basic search, and Search 2.0. Bug Fixes & Performance Improvements Previously, the Create/Patch/Update User webhooks were passing the user's password, if present, in the clear. This has now been redacted, as is our policy across the board. We have make some changes to our product cache loading in order to improve performance for product listing and related endpoints. This affects non-Search 2.0 enabled buyers only. For Search 2.0 enabled buyers, we did some performance improvements around GET me/products , specifically around improving performance on searches that use XP extensively.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v1090-release-notes.html"},{"title":"API v1.0.89 Release Notes","text":"Production Release Planned for Thursday, December 20th, 2018 at 7:30 PM. Summary Several bug fixes and performance improvements. Updates Variants & Variant Inventory We've expanded Variant functionality! Variants are used to create versions of the same product that have different specs. For example, one product might have three different sizes available, small, medium, or large. Rather than have three different products, variants allows you to have one product with different arrangements of specs. Specs can also be open text entry, or include a markup. We've expanded variants to allow for variant-level inventory tracking. You can now: see variant information for products on a line item or shipment sub-object track inventory at a variant level write custom variant ids write shipping size/weight information at a variant level Bug Fixes & Performance Improvements We've reduced latency around product catalog changes. We've fixed an issue where you could have a supplier and a non-supplier user of the same username. All user names should be unique within an organization. Setting a product's DefaultSupplierID without an assignment between that product and the supplier is somewhat nonsensical. Now, creating or updating a product's DefaultSupplierID creates an assignment if missing.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v1089-release-notes.html"},{"title":"API v1.0.88 Release Notes","text":"Production Release Planned for Tuesday, December 18th, 2018. Summary Several bug fixes and performance improvements. Updates Search 2.0 Beta We've gotten some more feedback from our beta group about what they want in this new Search, and we've changed some of our search weighting accordingly. We have severely reduced fuzziness in an effort to return fewer, more relevant results. Fuzziness is aimed at improving natural language type search queries, and in a B2B context, frequently customers know exactly what they want, rather than a more general query. In queries where a user is searching on multiple fields, we were seeing partial matches from fields earlier in the list rising above exact matches from fields later in the list. We've changed up the weighting on these to favor more exact matches. Bug Fixes & Performance Improvements We've reduced latency around product catalog changes.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/api-v1088-release-notes.html"},{"title":"DevCenter 1.0.5 Release Candidate Notes","text":"Planned to be Released to Production on Thursday, March 8th at 8:30 PM Central Time. Release Notes When not logged into DevCenter, going to developer.ordercloud.io will now route you to Documentation , not the login page. You can see the cursor now in the Console. Other minor bug fixes and enhancements.","tags":"DevCenter Release Notes","url":"https://ordercloud-api.github.io/release-notes/ordercloud-devcenter-v1.0.5.html"},{"title":"DevCenter 1.0.4 Release Candidate Notes","text":"Release Scheduled for 2:30 PM Central on February 22nd, 2018. Bug Fixes Fixed several issues around the Dashboard breadcrumb. Caught a few images that were broken when minified. As always, if you have questions or comments, please talk to us in Slack !","tags":"DevCenter Release Notes","url":"https://ordercloud-api.github.io/release-notes/ordercloud-devcenter-v1.0.4.html"},{"title":"DevCenter 1.0.3 Release Candidate Notes","text":"Release Scheduled for 5:00 PM Central on February 19th, 2018. Bug Fixes Removed DELETE confirmation modals from the Console. We've fixed some issues with minification, so initial page load times should be improved, and that eternal load indicator on some guides will be gone as well. Two load indicators on \"Open in API Console\" fixed. Features We changed the Order.Direction parameter to a dropdown rather than a text box, as Direction only ever has two valid values -- Incoming and Outgoing . In API 1.0.70 we changed Catalogs to no longer allow deletion of a default catalog for a buyer. We updated DevCenter to reflect this more clearly. As always, if you have questions or comments, please talk to us in Slack !","tags":"DevCenter Release Notes","url":"https://ordercloud-api.github.io/release-notes/ordercloud-devcenter-v1.0.3.html"},{"title":"DevCenter 1.0.2 Release Candidate Notes","text":"Release Scheduled for 7:30 PM Central on February 15th, 2018. Bug Fixes Removed DELETE confirmation modals from the Console. We've fixed some issues with minification, so initial page load times should be improved, and that eternal load indicator on some guides will be gone as well. Two load indicators on \"Open in API Console\" fixed. Features We changed the Order.Direction parameter to a dropdown rather than a text box, as Direction only ever has two valid values -- Incoming and Outgoing . In API 1.0.70 we changed Catalogs to no longer allow deletion of a default catalog for a buyer. We updated DevCenter to reflect this more clearly. As always, if you have questions or comments, please talk to us in Slack !","tags":"DevCenter Release Notes","url":"https://ordercloud-api.github.io/release-notes/ordercloud-devcenter-v1.0.2.html"},{"title":"DevCenter 1.0.1 Release Candidate Notes","text":"Release Scheduled for 7:30 PM Central on January 30th, 2018. Release Notes As part of our ongoing efforts to improve developer experience, we've made some changes to OrderCloud DevCenter . Most of the changes are under the hood, but we think you'll appreciate the following: We've dusted off the styling for DevCenter in general. It should be mildly faster to respond and more consistant in its design. We also fixed a bunch of nagging little bugs. We've heard the cry for Documentation improvements, and we hope you like this initial overhaul! Our collection of Platform Guides should be entirely correct and up to date . We've removed Use Case Guides, and are currently considering how to better provide this kind of buisness use case information going forward. One big bug we fixed was the around the Platform Guide section links. These should be much more helpful now when sharing documentation references with your team. We've made improvements to the Documentation loading times. We know this has been a real pain point, but load times should be noticiably improved. In the OrderCloud Dashboard , we've fixed various bugs, particularly around Buyer and Seller Org managment, and Integrations. We've also updated the Integrations available to reflect our current platform offerings. Notably, Avalara is not a platform option anymore. We've found Avalara to be an Integration that needs a little more customization than we can currently allow in our our of the box integrations -- if you would like to know more about setting up Avalara as a custom integration, please talk to us in Slack . We have reviewed existing Avalara configurations, and if you were/are using it, your configuration still exists. However, you should contact us to discuss migrating to a custom integration. On Webhooks, we've added the ability to configure pre-webhook functionality. These pre-webhooks allow you to do useful things like verify that order information is correct before the order is submitted. Another option that we find handy is allowing a user to be assigned particular assignments on User creation. Also on webhooks, we've fixed some bugs around updating an existing configuration. No more need to delete and recreate your configurations! In the OrderCloud Console , documentation links have been fixed, and added more lock boxes to make console use easier. You can now use multiple filters in the Console on API List endpoints! A supported API feature, we've now added support for it in the DevCenter. URL Changes As part of the DevCenter update, we've changed up some of the DevCenter URLS. Please take note and update bookmarks accordingly. First off, DevCenter can now be found at developer.ordercloud.io . Accordingly, the different sections of DevCenter have also been updated. account.ordercloud.io can now be found at developer.ordercloud.io/account console.ordercloud.io can now be found at developer.ordercloud.io/console dashboard.ordercloud.io can now be found at developer.ordercloud.io/dashboard documentation.ordercloud.io can now be found at developer.ordercloud.io/documentation community.ordercloud.io can now be found at developer.ordercloud.io/community As always, if you have questions or comments, please talk to us in Slack !","tags":"DevCenter Release Notes","url":"https://ordercloud-api.github.io/release-notes/ordercloud-devcenter-v1.0.1.html"},{"title":"OrderCloud API v1.0.69 Release Notes","text":"Released to Production January 15th, 2018 at 7:30 PM Central. Bug Fixes Previously, we had some inconsistent logic about when we evaluated Promotions on an order. Sometimes, this would lead to a submitted order suddenly having an invalid promotion, potentially changing the order total. As we want to allow a historical record of promotions at the time of order submit, we have now limited promotion evaluation to only orders whose statuses are unsubmitted or awaiting approval . We also fixed a bug around the rules engine for Order Approvals . If a User is in the approving group for an approval rule, any order submitted by that User that meets the approval rule should be auto-approved. Or, stated another way, because the User is an Approving User, their order does not need separate approval.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/ordercloud-api-v1.0.69.html"},{"title":"API v1.0.68 Release Notes","text":"Released to Production on 12/15/2017 at 7:30 PM (Central). Bug Fixes Fixed an issue with the Incrementation Config on object PATCH Fixed an issue where an Anonymous User would lose access to an order if an Admin User changed that order.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.68-release-notes.html"},{"title":"API v1.0.67 Release Notes","text":"Released to Production on December 8th, 2017 Fixed some performance issues that cropped up in Production after API 1.0.66 was released.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.67-release-notes.html"},{"title":"API v1.0.66 Release Notes","text":"Released to Production on December 7th, 2017 New Features Customized Platform Object ID Generation A big question we get from clients a lot is \"How can I make the OrderCloud API IDs work nicely with the IDs from my ERP or other internal systems?\". Prior to API 1.0.66, you could either set the ID manually (which is a pain if you want incrementation to work well) or you could settle for the default platform random GUID, and keep track of your ERP integration ID in an xp , or some other work around. We've added a new feature that aims to make this process much, much simpler! Incrementation Config allows you to create a customized pattern for ID generation. Incrementation Config { \"ID\": \"\", \"Name\": \"\", \"LastNumber\": 0, \"LeftPaddingCount\": 0 } The important parts here are the LastNumber and the LeftPaddingCount . Examples: Objective: Every order from a buyer should start with the buyer company's name, TestCorp, so that it can be differentiated easily by the supplier. The total number of characters for an ID can only be 20 characters long. (ex: TestCorp-00000000001 ) Create the Incrementor Config POST /v1/incrementors/ { \"ID\": \"config01\", \"Name\": \"Bob\", \"LastNumber\": 0, \"LeftPaddingCount\": 10 } Create the order using the Incrementor Config POST /v1/orders/outgoing { \"ID\":\"TestCorp-{config01}\" } returns as: { \"ID\": \"TestCorp-00000000001\", ... } If you make another order with this Incrementor Config, you'll get TestCorp-00000000002 and so on. This Incrementor Config can be used for both object creation, and PATCH / PUT updates. Additionally, once created, the Incrementor Config's LastNumber reflects the last number incremented to. So, if the last ID generated by config01 was TestCorp-00000000011 , the LastNumber for config01 would be 11 at that moment. Caveats: 1 - Left-padding does not represent a maximum value for the ID. If you have { \"ID\": \"config01\", \"Name\": \"Bob\", \"LastNumber\": 0, \"LeftPaddingCount\": 1 } when you get to 99, the ID will continue incrementing. If you're using it as in the above example, where your ERP expects ONLY x number of characters, this is going to cause some problems. 2 - While you can reuse the same incrementator on different endpoints -- such as using config01 for both products and orders, for some reason -- the incrementation will be across both endpoints. EX: Order 1 with `config01` - `Order-00000000001` Product 1 with `config01` - `Product-00000000002` Order 1 with `config01` - `Order-00000000003` Order 1 with `config01` - `Order-00000000004` Order 1 with `config01` - `Order-00000000005` Product 1 with `config01` - `Product-00000000006` 3 - If you're not careful about how you handle your asynchronous API calls, it's much easier to accidentally try to create duplicate IDs. So be hygienic with your async calls! 4 - If you decide to reset the incrementor's LastNumber , you can end up trying to create duplicate IDs again. Be careful! Allowing a Buyer User to impersonate a Buyer User from a different company Now, instead of a Buyer User only being able to impersonate a Buyer User within the same Buyer, a Buyer User can impersonate a Buyer User in a different Buyer, as long as they're within the same Seller organization. This is useful if you have a customer user that works for multiple of your customers. This allows them to interact within those buyers uniquely, but maintain their user account easily. Bug Fixes Duplicate Products returned in ME Product Lists We've fixed a problem where, sometimes in very large catalogs with complicated category structures, a user using a GET me/products list would return some duplicate products. This fix should also show some minor performance improvements for very large catalog list calls. Post-Submit Order Changes Triggered Promotion Evaluation Previously, if you tried to alter an order with a promotion after it had been submitted, and the promotion had expired, your alteration would throw an error. We've fixed this so that promotions are never evaluated after order submit now. Various performance improvements and other small bug fixes. What it says on the tin.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.66-release-notes.html"},{"title":"API v1.0.65 Release Notes","text":"Released to Production on Tuesday, November 21st, 2017 New Features The Me endpoint for categories now has an optional ProductID filter. This allows a user to find all the categories assigned to them that have that product in them, removing the need to give a user the CategoryReader role to accomplish this. Request: GET https://api.ordercloud.io/v1/me/categories?ProductID=SuperAwesomeProduct Response: Status Code = 200 { \"Meta\" : { \"Page\" : 1 , \"PageSize\" : 20 , \"TotalCount\" : 25 , \"TotalPages\" : 2 , \"ItemRange\" : [ 1 , 20 ] } , \"Items\" : [ { \"ID\" : \"SuperAwesomeCategory\" , \"Name\" : \"I Contain the SuperAwesomeProduct\" , \"Description\" : \"\" , \"ListOrder\" : 1 , \"Active\" : true , \"ParentID\" : \"\" , \"ChildCount\" : 0 , \"xp\" : {} } ] } We also added a Me route for GET ing a single category! DOCS GET https://api.ordercloud.io/v1/me/categories/{categoryID} Bug Fixes Previously, if you attempted to submit an order that had a lineitem with a product that had specs and options, it would fail. Fixed now! need a refresher on product specs and spec options? api reference for product specs On OrderSubmitted Message Sender Mandrill Templates , the order total merge variable was not accurately reflecting order total, leaving out promotion discount. This is now fixed. (The API model was never affected, only the Message Sender merge variable.) We fixed a bad index that was causing massive performance problems for DELETE ing a Security Profile assignment . You should be able to go forth and delete to your hearts content now with no fear of the angry spinner!","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.65-release-notes.html"},{"title":"API v1.0.64 Release Notes","text":"Released to Production on Monday, October 30th, 2017 New Features We now allow lineitems of unsubmitted Orders to be added to a Shipment . This does not apply to the ship all endpoint . There is a new endpoint that allows a buyer user to be transfered from one buyer to another, within the same organization. Please check out the documentation for further details. please note, this should only be attempted by an admin user in a seller application. If a buyer user, even one with Full Access , tries this, it will not work as expected.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.64-release-notes.html"},{"title":"API v1.0.63 Release Notes","text":"Released to Production on Wednesday, October 18th, 2017 Bugs Payments: Payment with Type SpendingAccount must have SpendingAccountID Unable to use PUT to create new UserGroup Orders: order.Total not updated when ShippingCost is updated via PATCH New Features Added transactional email support for guest checkout ( documentation ) `PATCH` `v1/orders/{direction}/{orderID}/fromuser` { \"FirstName\" : \"\" , \"LastName\" : \"\" , \"Email\" : \"\" } Products: Allow negation of all filters on admin Product List ( catalogID , categoryID , supplierID )","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.63-release-notes.html"},{"title":"API v1.0.62 Release Notes","text":"Released to Production on Thursday, September 28th, 2017 New Features Upgraded to latest Flurl","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.62-release-notes.html"},{"title":"API v1.0.61 Release Notes","text":"Released to Production on Thursday, September 7th, 2017 New Features Several tweaks to improve API logging and Documentation generation. Bug Fixes Previously, if you transfered an anon user's order to a profiled user, the prices would not update to reflect the profiled user's price assignments. This is now fixed.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.61-release-notes.html"},{"title":"API v1.0.60 Release Notes","text":"Released to Prod on Tuesday, July 18th, 2017 at 7:30 PM CST. New Features We've added a description field to Message Senders. We moved the platform Message Sender code to a public repo, so that developers can use it to create custom Message Senders. Message Sender on GitHub Please note, we have not yet enabled custom message senders in DevCenter . You can start to develop one but can't configure one just yet to be used. This will be available in DevCenter in the near future. We've improved logging around Message Senders. Bugs Fixed We fixed an issue that was blocking New User Invite emails.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.60-release-notes.html"},{"title":"API v1.0.59 Release Notes","text":"Released to Prod on Thursday, July 13th, 2017 at 7:30 PM CST. New Features We've added the Billing Information Name to Customer Profile on our Authorize.Net integration. Bugs Fixed We have added better error handling for API calls that include .NET reserved keywords in the route (typically in a buyer ID, etc.) You should no longer ever receive a 409 duplicate error on a GET call. Instead this will properly return a 500 error, as this is a bug.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.59-release-notes.html"},{"title":"API v1.0.58 Release Notes","text":"Released to Prod on Thursday, June 29th, 2017 at 7:30 PM CST. New Features Various performance improvements","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.58-release-notes.html"},{"title":"API v1.0.57 Release Notes","text":"Released to Prod on Friday, June 23rd, 2017 at 7:30 PM CST. Bug Fixes Previously, if you created or patched a Shipment's ToAddressId , the response body would show NULL . This is now fixed. If you had a Shipment's ToAddressId set to NULL , and attempted to trigger a shipment notification through Message Senders, it would not get sent. New Features When you add a new xp value to be indexed, previous xp with that value will now be retroactively indexed. Performance improvement around logging.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.57-release-notes.html"},{"title":"API v1.0.56 Release Notes","text":"Planned to be released to Prod on Friday, June 16th, 2017 at 7:30 PM CST. Bug Fixes Fixed an issue where a second approval or decline of an order would return a 409 error New Features If a default ShipFrom address exists on a product, the shipFromAddress on a line item containing that product is now inherited on line item create, not order submit. This allows shipping to be more easily calculated. You can now filter lists with comparative operands >= and =< , as well as > , < , = , and ! All approvals are now listed in an order's approval history, not just the final one.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.56-release-notes.html"},{"title":"API v1.0.55 Release Notes","text":"Released to Prod on Tuesday, June 13th, 2017 at 8 PM CST. New Features We added two new Mandrill template variables: ShipmentItems and DateShipped Bug Fixes We fixed an issue where some list endpoints would fail intermittently with a 409 error. This included Me Categories, and Me Products, among others. We fixed an issue where the Rules Engine was throwing a 500 if you tried to create a rule with order.xp in either of the expressions.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.55-release-notes.html"},{"title":"API v1.0.54 Release Notes","text":"Released to Production on Friday, May 26th, 2017 at 7:30pm CST. Bug Fixes Now when you PATCH the LineItem.UnitPrice, the LineItem Total will update as well! We've improved our error handling for invalid rules engine expressions, so you find out if it's an invalid rule when you try to create it, not when you try to submit an order. Fixed a race condition where adding the same product to multiple categories sometimes resulted in a 409 error. New Feature We improved performance for admin category lists substantially. We now return a Buyer subobject on the me/user model","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.54-release-notes.html"},{"title":"API v1.0.53 Release Notes","text":"Released to Production on Monday, May 15th, 2017 at 7:30pm CST. Bug Fixes Buyer Users with the ShipmentAdmin role can now properly create shipments. We now properly throw a 409 error if you try to delete an admin user who is being used as the DefaultUserContextID for an org. Listing me/Shipments performance should be noticeably improved on large lists. Initial emails for Approvals message senders were not being sent. New Features Developers who use the OIDC flow for authentication will now be able to dynamically route their users to specific parts of their app after authentication. To do so, add appstartpath=<extrapath> to the query on ocrplogin. Example: https://nodomain.com/myapp{2}?token={0}&idt={1} The {2} can go anywhere in the appstart url.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.53-release-notes.html"},{"title":"API v1.0.52 Release Notes","text":"Released to Production on Wednesday May 10th, 2017 at 7:00pm CST. New Features Improved performance for seller-side /orders lists Bug Fixes Now, a buyer user with CatalogAdmin should be able to: Patch any catalog assigned to their buyer Update any catalog assigned to their buyer SaveProductAssignments for any catalog assigned to their buyer ListProductAssignments for any catalog assigned to their buyer DeleteProductAssignments for any catalog assigned to their buyer A buyer user with CatalogAdmin should not have the ability to: Assign catalogs to other buyers List catalog assignments of other buyers Delete catalog assignments (even those for their own buyer) Delete catalogs (even those assigned to their buyer) Removed invalid parameters previously documented on list endpoints","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.52-release-notes.html"},{"title":"API v1.0.51 Release Notes","text":"Released to Prod on Sunday, May 7th, 2017. New Features Improved performance for me/categories and me/product lists. We've added some more debug information to OpenConnectID errors. Bug Fixes Previously, we required CatalogAdmin and ProductAdmin to list Catalog and Product assignments, respectively. This is now changed to be consistant with other assignment listing role checks so that the user only needs CatalogReader / ProductReader . Now, if you patch a line item unit price with either null or an empty string, the price will be recalculated. No more 500 error when you try to delete a category with children. Generating variant IDs for Spec Option IDs that have blank spaces in their values will no longer result in IDs with spaces. Now all spaces are translated as -. Trying to patch ShipWeight / Height / Width / Length with a string no longer throws an error. Trying to patch a spec option with an invalid ID returns a 404 now.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.51-release-notes.html"},{"title":"API v1.0.50 Release Notes","text":"A public staging environment will be available starting on Sunday, April 2nd. The 1.0.50 version will be released to Production on May 4th at 8:00 PM Central. You can access the staging environment using your production data and the following: api: https://stagingapi.ordercloud.io auth: https://stagingauth.ordercloud.io devcenter: https://staging-account.ordercloud.io Production data will be copied down to the Staging environment weekly, on Sundays. In Staging, all webhooks will have their assignments deleted to disable them initially. Please update your webhooks and integrations in Staging to point somewhere other than Production ASAP. On the production release, no staging data will be transfered to production. This was released to Production on May 4th at 8:00 PM Central. New Features Payments have a new boolean field, Accepted . PUT has been removed from Payments, and PATCH can never edit Type , CreditCardID , and SpendingAccountID . Only users with OrderAdmin or FullAccess roles will be able to create or update the Accepted property. If the Accepted property is true AND the order has been submited, a Shopper cannot patch the payment but a user with OrderAdmin or FullAccess can. If the Accepted property is true AND the payment type is a credit card, a Shopper cannot patch the payment but a user with OrderAdmin or FullAccess can. If the Accepted property is true, the order has not been submitted, and the payment type is not a credit card, either a Shopper or OrderAdmin CAN patch the payment. If Accepted is false, any user with either role can patch all other fields except the 3 listed above. As part of the data conversion for existing payments, Accepted will be set to true for the following: All non-credit card payments (spending accounts, POs) All orders that were ever submitted (open, completed, seller-canceled) All payments containing a successful PaymentTransaction PUT has been removed from payments. PATCH is allowed, but only to patch the Accepted property, and only if the user has OrderAdmin or FullAccess . Order submit logic will validate Payment.Accepted=true and an error will be thrown if an order with an unaccepted payment is submitted. Previously, any admin user could impersonate any buyer user. Going forward, an admin user must have the BuyerImpersonation role in their security profile to impersonate buyer users and request the role when impersonating a user. Due to refactoring around our password hash algorithm, and since we do not store users' passwords ourselves, but simply a hash of the password, users will need to reset their passwords before they can log into the OrderCloud DevCenter or any OrderCloud apps . When you authenticate to the Ordercloud API initially after this release, the only role your user will have is the PasswordReset role, and after you've reset your password, you'll need to re-authenticate to get your full array of roles. If you provide an application to users, we recommend have the application redirect any user who authenticates and only has the PasswordReset role to be redirected to a different view, where their password can be reset using the new /me/password endpoint. Alternately, any user can trigger an email-based password reset, using the Forgotten Password endpoint. Due to the aforementioned password changes, DevCenter users will need to reset their DevCenter passwords by going to the \"Forgot Password\" link in DevCenter. Users will need to do this in the Staging Environment and in Prod after the production release. Added roles that control who can list or edit shipments. Now users with ShipmentAdmin or OrderAdmin can create or edit shipments. Users with ShipmentReader or OrderReader can get/list shipments. Seller-side product lists ( v1/products ) can now be filtered on CatalogID and CategoryID ( CategoryID is unique only within a Catalog, so you must specify both in order to filter on Category.) Buyer-side product lists ( v1/me/products ) that specify CategoryID can also specify depth , which can be an integer 1 or greater ( depth=1 means products directly assigned to category) or all . Default is all . An order that requires approval can now be sent back to the submitting user by the approver user for editing and re-submission. See Decline Orders for more details. We are changing the route to register an anonymous user (previously called \"Create From Temp User\") to PUT v1/me/register . This will help make our Swagger spec more flexible. Any buyer user can now list shipments for their own orders in a User Perspective route, me/shipments . No more need for elevated permissions! In order to encourage best practices, only group-level and buyer-level assignments will be allowed for the following resources: Products Categories Promotions Cost Centers Message Config If there are existing user-level assignments for any of the above, you must convert them to group- or buyer-level before the production release date . OrderApproval now contains nested Approver object containing all details of the approving user. Example: { \"ApprovalRuleID\": \"...\", \"ApprovingGroupID\": \"...\", \"Status\": \"Pending\", \"DateCreated\": \"...\", \"DateCompleted\": \"...\", \"Approver\": { \"ID\": \"...\", \"FirstName\": \"...\", \"LastName\": \"...\", \"UserName\": \"...\", \"Email\": \"...\", \"Active\": \"...\", \"xp\" : { ... } }, \"Comments\": \"...\" } We have also moved approval comments out of the URL query string and into the request body. There is a maximum length of 2000 characters. We have added new roles around the administration of Admin Addresses: AdminAddressReader and AdminAddressAdmin . Inventory Revamp Inventory-related data points on Product are being moved into a nested Inventory object. Summary of Inventory Object Changes: Old New Product.InventoryEnabled Product.Inventory.Enabled Product.InventoryNotificationPoint Product.Inventory.NotificationPoint Product.VarientLevelInventory Product.Inventory.VariantLevelTracking Product.AllowOrderExceedInventory Product.Inventory.OrderCanExceed Product.InventoryVisible removed /products/:id/inventory resource removed Inventory.Available Product.Inventory.QuantityAvailable Inventory.LastUpdated Product.Inventory.LastUpdated Inventory.ID removed Inventory.Name removed Inventory.Reserved removed /products/:id/inventory removed Summary of Inventory Behavioral Changes: Product.Inventory.QuantityAvailable is writable. PATCH v1/products/:id { \"Inventory\": { \"QuantityAvailable\": 999 } } is the preferred way to manually set inventory. QuantityAvailable is deducted on order submit or final order approval (whichever point order status changes to Open ). QuantityAvailable is adjusted when quantity changes are made to line items on Open orders. QuantityAvailable is validated, but not adjusted, when items are added or quantities change on Unsubmitted orders. A 400 error occurs if item quantity exceeds available inventory and Product.Inventory.OrderCanExceed is false. QuantityAvailable is always re-validated per the rules above on order submit. Shipment Changes The nested Shipment.Items collection has been removed, and shipment items are instead retrieved or saved via new endpoints, much like line items. To compensate for the above, there is a new me/shipmentitems endpoint. BuyerID has been removed from routes, meaning you can list shipments across multiple buyers. Shipment IDs are now seller-unique. All new fields listed below derive their values from corresponding LineItems, helping to avoid additional lookups when working with shipments. New Shipment Field Notes Shipment.Account writeable Shipment.FromAddressID writeable Shipment.ToAddressID writeable Shipment.FromAddress nested object, read-only Shipment.ToAddress nested object, read-only ShipmentItem.UnitPrice read-only ShipmentItem.CostCenter read-only ShipmentItem.DateNeeded nested object, read-only ShipmentItem.Product nested object, read-only ShipmentItem.Specs nested collection, read-only ShipmentItem.xp read-only Old Endpoint New Endpoint GET v1/:BuyerID/shipments GET v1/shipments GET v1/:BuyerID/shipments/:id GET v1/shipments/:id N/A GET v1/shipments/:id/items N/A GET v1/shipments/:id/items/:orderID/:lineItemID N/A POST v1/shipments/:id/items N/A PATCH v1/shipments/:id/items/:orderID/:lineItemID Simplified Product and Category Assignments New Properties Notes Catalog.Active CatalogAssignment.ViewAllCategories CatalogAssignment.ViewAllProducts CategoryAssignment.Visible Nullable, inherited from parent or catalog CategoryAssignment.ViewAllProducts Nullable, inherited from parent or catalog Product.DefaultPriceScheduleId Optional, but encouraged. For a Buyer User to see a Product in the User Perspective ( GET v1/me/products ), all of the following must be true: Product.Active is true Product belongs to a Catalog where Catalog.Active is true Buyer is assigned to this Catalog In addition, one of the following must be true: In Buyer assignment to Catalog, CatalogAssignment.ViewAllProducts is true , OR Product belongs to active Category in the catalog, Category is assigned to Buyer (or any Group the user is in), and CategoryAssignment.ViewAllProducts is true , OR Product is assigned directly to Buyer (or any Group the user is in). We recommend checking out the [Catalog Visibility Guide]","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.50-release-notes.html"},{"title":"Breaking Changes Release Notes","text":"These are now available at the v1.0.50 Release Notes .","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/breaking-changes-release-notes.html"},{"title":"API v1.0.44 Release Notes","text":"Released to Production on Monday, April 17th, 2017 at 8 PM CST. Bug Fixes Fixed a bug where, in some particular cases, a user who submitted an order could also approve it.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.44-release-notes.html"},{"title":"API v1.0.43 Release Notes","text":"Released to Production on Wednesday, April 5th, 2017 at 7:30 PM Central. Bug Fixes We now round the following to two decimal places: OrderPromotion.Amount LineItem.LineTotal Order.Subtotal Order.ShippingCost Order.TaxCost Order.PromotionDiscount SpendingAccount.Balance Shipment.Cost Payment.Amount PaymentTransaction.Amount We now return a useful and informative error message if you try to list CatalogAssignments without required parameters. We now return a useful and informative error message if you try to delete a user who has an open order outstanding. We now decrement SpendingAccounts on delete of a payment and not if it's just routed for approval.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.43-release-notes.html"},{"title":"API v1.0.42 Release Notes","text":"Planned to be released to Production on Thursday, March 9th, 2017 at 7:30 PM Central. Bug Fixes Fixed a couple issues where markups on product specs were not being correctly reflected in lineitem totals. XP filtering on buyers is now fixed. Delete webhook firing issue is fixed.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.42-release-notes.html"},{"title":"API v1.0.41 Release Notes","text":"Released to Production on Friday, March 3rd, 2017 at 7:30 PM Central. Bug Fixes Fixed an issue where the Reset Password Token didn't expire. Now expires after two hour. Fixed an issue around Promotions with value expressions containing product.incategory Fixed an issue where you couldn't delete orders after they'd been approved. Fixed an issue where you'd get a 500 instead of a useful error if you submit an order without specs if the order contained a specc'd product Fixed an issue where you got a 500 instead of a useful error if you tried to assign a non-existent user to an admin group Improved large value handling in unit prices You now (correctly) need ApprovalRuleAdmin and ApprovalRuleReader to admin/read approval rules and not AddressReader .","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.41-release-notes.html"},{"title":"API v1.0.40 Release Notes","text":"Released to Production on Thursday, February 23rd, 2017. Bug Fixes Fixed an issue where you couldn't update a Category's ParentID to null Fixed a bug around promotions with value expressions evaluating product.incategory Removed some ApprovalRule fields related to features that don't exist yet. Fixed a tricksy bug where in some situations, the Meta of a list would change if the pageSize changed. You now get a much more helpful error if you try to assign a price to a product that doesn't exist.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.40-release-notes.html"},{"title":"API v1.0.39 Release Notes","text":"Planned to be released to Production on Thursday, February 9th, 2017. Bug Fixes Fixed an issue where occasionally, if you added valid promo on an order, you would not be able to update the order afterwards.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.39-release-notes.html"},{"title":"API v1.0.38 Release Notes","text":"Released to Production on Sunday, February 5th, 2017. New Features Several performance improvements around Product and Product Inventory We've added a FromCompanyID to the Order object, and you can filter on it, so that orders from different companies can be easily identified.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.38-release-notes.html"},{"title":"API v1.0.37 Release Notes","text":"Released to Production Tuesday, January 31st, 2017 at 7:30 PM Central. Bug Fixes We've fixed an issue where, if a product on an lineitem has required specs, but no specs are filled out and there's no default, the line item create is successful. Instead, now an error is thrown with with the missing specs. You should now be able to successfully set a string as a spec value on a lineitem if the product on the lineitem allows open text. If a buyer user has a private credit card and elevated roles ( FullAccess , CreditCardReader & OrderAdmin , for example), you'll be able to create a payment on the private credit card without errors. Admin listing endpoints for assignments ( listProductAssignments , etc) will no longer return assignments for deleted buyers.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.37-release-notes.html"},{"title":"API v1.0.36 Release Notes","text":"Released to Production on January 17th, 2017 at 7:30 PM Central. New Features We've added a new sub-object to the LineItem object. Now, when you list LineItems, you'll see the products that are on the lineitem too. This currently does not include the full price break information. New Line Item Object Example : { \"ID\": \"6-Ap0yfJ6k2kDxEJhPA4432vjA\", \"ProductID\": \"Test01\", \"Quantity\": 5, \"DateAdded\": \"2016-05-19T17:51:46.127+00:00\", \"QuantityShipped\": 0, \"UnitPrice\": null, \"LineTotal\": 0, \"CostCenter\": null, \"DateNeeded\": null, \"ShippingAccount\": null, \"ShippingAddressID\": \"2WRMZMDcakaVaoJ6Hf_r1w\", \"ShipFromAddressID\": null, \"Product\": { \"ID\": \"Test01\", \"Name\": \"Test01\", \"Description\": \"Test01 Lorem Ipsum\", \"QuantityMultiplier\": 1, \"ShipWeight\": 1, \"ShipHeight\": null, \"ShipWidth\": null, \"ShipLength\": null, \"xp\": { \"test\": false } } Shipping Rates Integration We've added UPS account configuration options to the Shipping Rates integration. We've added the option to adjust (as an admin) rates that are displayed to users by either a percentage or a flat rate, either at a global or carrier level. You can now add a manual shipper as well, to account for another kind of shipper than USPS or UPS. Authorize.net We're storing the partial card number for single use card payments in the Payment object's XP, so it can be used in the refund transaction. Bug Fixes You can't see expired Spending Accounts in the User Perspective Spending Account list, and you can't use one to make a new payment either. You can create a payment that exceeds the Spending Account balance if and only if the Spending Account Assignment for the relevant party has AllowExceed set to true . Speaking of price schedules, you can now set a minimum quantity, even when the quantity is not restricted to particular breaks. So, you can now say someone has to order at least 5 products, but they don't have to order only 10, 20, or 30, for example. A buyer user without elevated permissions cannot cancel their completed orders. (๑•̀ㅂ•́)و Mandrill Integration We've fixed an issue with the Date Submitted variable for Orders not getting pulled into Mandrill email templates properly. Authorize.net We've fixed the partial UpdateCreditCard to stop overwriting the CardholderName with null . Client Libraries","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.36-release-notes.html"},{"title":"API v1.0.35 Release Notes","text":"Planned to be released to Production Thursday, December 15th, 2016 at 7 PM CST. This date is subject to change New Features We've expanded how you can use categories in the Rules Engine. You can now use items.total in your value expressions. We've added some new Mandrill variables that can be used in your Mandrill integrations: Line Item Count PO# Ship To Prior Approver You can use any Order XP in your Mandrill templates, including subobjects. EX: orderxp_xpKey , nested objects: orderxp_xpKey_xpKey2 , and xp arrays indexes are accessed like this: orderxp_xpKey_0 (with zero being the index of choice). The Shipping Rate integration will now also calcuate shipping rates based off of the Line Item level ship from address, not just the product ship from address. Line Item-level shipping will take priority over product-level. You can now use just a username, not an email, to trigger a forgotten password email! Bug Fixes We fixed a bug where the Product Delete webhook trigger wasn't firing correctly. We fixed a display issue in the documentation around sorting priority. Client Libraries (potentially link to all of our current client libraries)","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.35-release-notes.html"},{"title":"API v1.0.33 Release Notes","text":"Released to Prod Tuesday, December 6th, 2016 at 8:00 PM CDT. New Features We added a new User Prespective endpoint for returning a user's spending accounts. Me/ListSpendingAccounts We've improved the information in our documentation about searchable/sortable properties and the order of precedence that these are applied in. An example is the API Documentation around Addresses We've added some performance enhacements around Products, particularly listing all products for a buyer. We now allow you to delete a product that is being used in an unsubmitted order. In submitted orders, the product information is retained, even after deletion. You can now use categories in the Rules Engine! For example, if you'd like to make a promotion that applies to products in only one category, you can use the following for a value expression: items.any(product.incategory('xxx')) Bug Fixes When you update a buyer company's default catalog, it actually updates now! We fixed an issue where, if you were authenticating as a user with claims other than FullAccess , the authentication performance was very poor. Client Libraries Angular SDK","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.33-release-notes.html"},{"title":"API v1.0.32 Release Notes","text":"Release Date: November 21st, 2016 at 8:00 PM Central. New Features: You can now filter list Order queries on the BillingAddress and ShippingAddress subobjects. This works on both Order and Me.Order lists. EX: /orders?ShippingAddress.Street1=xyz We've added true order-level shipping addresses. If a shipping address is set at the order level, all line items on the order will inherit that shipping address. PLEASE NOTE : Previously, if all your line items had the same shipping address, any new line item would have the same shipping address. This is no longer true. Line items will ONLY inherit a shipping address when it is explicitly set at the order level. There are no longer write-only address IDs on Order or Line Items; all of the following are now read/write: Order.BillingAddressID Order.ShippingAddressID LineItem.ShippingAddressID LineItem.ShipFromAddressID We've made several performance improvements around product history. Bug Fixes: You can again list and delete security profile assignments for admin users. Search results will now be accurate when listing categories using a depth parameter. You can no longer assign an invalid spec to a product; you will get an error on assignment.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.32-release-notes.html"},{"title":"API v1.0.31 Release Notes","text":"Released to Prod Thursday, November 10th, 2016 at 9 PM CST. New Features: The Authorize.net integration was updated to return more information in a more uniform response body. You can view updated Authorize.Net documentation here .","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.31-release-notes.html"},{"title":"API v1.0.30.1 Release Notes","text":"Released to Prod Friday, November 4th, 2016 at 9 PM CST. New Features: Delivery date added to Shipments Bug Fixes: several fixes around Buyer Networks","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.30.1-release-notes.html"},{"title":"API v1.0.30.0 Release Notes","text":"Released to Prod on Friday, October 28th, 2016 at 8 PM CST. New Features: Shared Catalogs : Now a seller org can have multiple catalogs that can be assigned to one or many buyer orgs. There will be more information about this feature coming soon, but please be aware that it may break some existing routes particuarlly around categories, as categories are now specific to a catalog instead of a buyer. To update your existing categories routes, you'll need to add the catalog ID to your API routes, and as a parameter in your SDK calls. Me Category endpoints are not affected, except in that you can optionally filter by catalog. Please check out the Api Documentation . A single client ID for an app can be used by different buyers. This is our first step towards an exciting feature on our roadmap, Buyer Networks . You can now reference Product Names in your Mailchimp/Mandrill message templates! Previously, you could use Product Description and Product ID, now you can add Product Name as well. Bug Fixes: We updated Spending Accounts to be decremented when an order is submitted, rather then when a payment is applied to an unsubmitted order. (Clearing an order will refund any payments applied, even if the order is unsubmitted-- deleting the order will not do so automatically.) SDK Release Notes: The SDK that will be going out with the API release will be v1.0.24 . After the API is released, if anyone runs a bower update with lastest in their bower.json for ordercloud-ng-sdk they will be updated to v1.0.24","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.30.0-release-notes.html"},{"title":"API v1.0.29.0 Release Notes","text":"Released to Prod on Wednesday, October 26th, 2016 at 8 PM CST. New Features Integration Proxies and Assignments - see the Integrations guides in documentation.ordercloud.io Webhook assignments - see Webhooks in the Dashboard guide in documentation.ordercloud.io","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.29.0-release-notes.html"},{"title":"API v1.0.28.0 Release Notes","text":"Released to Prod on Wednesday, October 5th, 2016 at 8 PM CST. New Features Product/Spec Enhancements Bug Fixes Preserve InteropID in Buyer Delete","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.28.0-release-notes.html"},{"title":"API v1.0.26.0 Release Notes","text":"Released to Prod on Monday, September 21st, 2016 at 8 PM CST. Bug Fixes Line Items: Date Needed cannot be in the past Category: SaveCategoryAssignmentAsync Assigning to usergroup also assigns at company level Category: Client.Me.ListCategoriesAsync not returning expected result \"Sequence contains no elements\" exceptions in BaseApiController","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.26.0-release-notes.html"},{"title":"API v1.0.25.1 Release Notes","text":"Released to Prod on Thursday, September 8th, 2016 at 8 PM CST. Bug Fixes Line Items: Attempt to patch product id should throw error Credit Cards: should validate on creating Performance issues - order/{orderid}/submit endpoint - time out error Specs: /productassignments returns 500 if no specID","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.25.1-release-notes.html"},{"title":"API v1.0.25.0 Release Notes","text":"Released to Prod on Saturday, September 3rd, 2016 at 8 PM CST. Bug Fixes Promotions - Patching order incorrectly updates PromotionDiscount Resolved Deadlock/Timeout issue on product search with xp filter","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.25.0-release-notes.html"},{"title":"API v1.0.24.1 Release Notes","text":"Released to Prod on Thursday, August 25th, 2016 at 8 PM CST. New Features Add Dimensions to Product Object","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.24.1-release-notes.html"},{"title":"API v1.0.24.0 Release Notes","text":"Released to Prod on Tuesday, August 9th, 2016 at 8 PM CST. New Features Security Profiles can now be assigned at the party level. (Buyer, User Group, User) These Security Profiles will be inherited, so a user's total roles will actually be the total sum of these inherited profiles. In order to see what roles a user actually has, user.AvailableRoles is an array listing all the roles that user has. Because security profiles can be assigned at the Buyer level, apps can now use self-signup of users more easily. Administration of Admin Users is more granular now with new AdminUserReader and AdminUserAdmin roles for Security Profiles. We added XP to Approval Rules. We added the option to limit usage of a Promotion to once per customer. We added a read-only RedemptionCount to Promotions, so that users will be able to report more easily on how often a Promotions is used. We have added the ability to set a default ShipFrom address on a product, so that it will always show as shipping from that address. Admin Users can now be put into Admin User Groups, much like Buyer Users/Buyer User Groups. Bug Fixes Previously, you would occasionally get a 409 error when PATCH ing an order. This has now been fixed. Breaking Changes Integration Proxy responses are now more clear about where an error is coming from. We changed how we store refresh tokens. This adds more security, as well as allowing us to have an unlimited refresh token. All apps will have to reauthorize after we deploy API 24. As the Category List endpoint now supports filtering a list of categories by parentID, we have removed: GET categories/xyz/categories (Categories.ListChildren) GET me/categories/xyz/categories (Me.Categories.ListSubcategories) Providing a parentID parameter explicitly in Category List is now redundant. Users should check that you are using the latest version of your SDK. Username is now required to be unique within a seller network. This opens up better possibilities for multiple buyers within one app, and a better user verification process. If you have not updated your username before the API 24 deploy when contacted, you will not be able to log in. We have changed our integration proxy base URL from api.ordercloud.io/v1/nativeintegrationproxy/:service to api.ordercloud.io/v1/integrationproxy/:service . If you use an integration within your app, please verify your url has been updated.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.24.0-release-notes.html"},{"title":"API v1.0.23.0 Release Notes","text":"Released to Prod on Saturday, July 23rd, 2016 at 8 PM CST. Changelog A new Promotions feature has been added to the platform. Now you can set up promotions, using the same Rules Engine logic as Approval Rules . This new functionality allows buyers to get a limited time discount, free shipping, etc. These Promotions can now be added to orders. Promotions are assignable to buyer parties. But like products, they are admin owned and can be shared between multiple buyers. An existing user can now start off as a temp user and then log in as an existing user. This gives them the ability to keep their current temp user order. The Order Approvals endpoint has been updated. You can now add comments and sort chronologically. You can now filter on Order.Total The endpoints returned from the Documentation API now properly reflect the Role information for each endpoint. The ability to get a list of pending order approvals has been improved. You can now get a list of unique users in one step, via: /orders/xyz/eligibleapprovers A number of bug fixes also went out with this release.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.23.0-release-notes.html"},{"title":"API v1.0.22.0 Release Notes","text":"Released to Prod on Friday, July 8th, 2016 at 8 PM CST. Changelog You can now list the pending approvals, for an order, by passing in the Order ID. This will primarily be used for email integrations. Notifications can now be sent to the approving group of users for each step, as the order gets passed along. The ability to set a ship-from address on a line item has been added, this will be useful for calculating shipping rates Endpoints have been created for seller addresses XP is now available for Approval Rules A Description field is now available for viewing, approving, and declining orders. XP is now available for Variants a number of bug fixes were also deployed with this release.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.22.0-release-notes.html"},{"title":"API v1.0.21.0 Release Notes","text":"Released to Prod on Wednesday, June 22nd, 2016 at 8 PM CST. Changelog Endpoint arguments that exist in the model, which the endpoint returns, and that have listArgs, have been removed. Example: v1/buyers/{buyerID}/categories/assignments This endpoint accepts buyerID, categoryID, userID, userGroupID, level, and listArgs. buyerID is required because it is part of the route. level should also be included because it is not part of the CategoryAssignment model. However, categoryID, userID, and userGroupID are all part of the CategoryAssignment model and can therefore be added to the Filters field within listArgs (since in both cases they will be included as query string parameters). The State and Zipcode validation has been updated. For Addresses with US country code, it is now required to have a State and Zipcode. For non-US addresses, it is not required.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.21.0-release-notes.html"},{"title":"The Rules Engine Has Arrived, and It'll Do for Behavior What XP Did for Data","text":"The Platform Team is excited to announce the release of our shiny new rules engine, with its first application being to power order approval workflows. What's a rules engine? Simply put, it's a system that executes rules. Okay... so what's a rule? In its simplest form, it's an if-then statement that is provided from the outside, rather than being \"baked into\" the engine itself. In the case of OrderCloud.io, we'll define the \"thens\" (starting with \"order requires approval\") and allow you to define the \"if\"s via custom logic expressions. Effectively, we're going to allow you to extend platform behavior in much the same way XP allows you to extend the data model. Let's see an example. Say you want every order over $200 with some specific XP value to require approval from a manager. You would first create a UserGroup containing all approving managers, then create a new ApprovalRule , setting the ApprovingGroupID to the ID of the new UserGroup , and setting ApprovalRule.Expression to this: order.Total > 200 and order.xp.MyCustomProperty = 'XYZ' A couple things to note: order supports the same properties as the Order model returned from /orders API endpoints, including XP . = , < , <= , >= , <> comparison operators are supported. and , or , and not logical operators are supported. + , - , * , / mathematical operators are supported. String values must be enclosed in straight single quotes. Date values must be enclosed in # symbols, e.g. #6/15/2016# Parentheses may be used to enclose sub-expressions and control order of execution. What about line items? Glad you asked, because which products are being purchased, in what quantities, charged against which cost centers, etc, are very common in the world of approval rules. But line items are a collection, so we use aggregate functions to inspect them. Here's how you would require approval on all orders over $200 charged to cost center ABC: order.Total > 200 and items.any(CostCenter = 'ABC') That's pretty powerful, but it's more likely that you only care about the subtotal of just the line items matching your CostCenter condition. For this you can use the items.total function: items.total(CostCenter = 'ABC') > 200 The condition inside the function (called a filter) can be more complex and contain and, or, etc. just like other parts of the expression: items.quantity(ProductID = 'P1' or ProductID = 'P2') > 5 items supports a total of 4 functions: - items.any (true if any item matches filter) - items.all (true if all items match filter) - items.quantity (compare result to a number) - items.total (compare result to a dollar amount) Speaking of functions, there is one defined on order: order.approved('id_of_some_other_rule') This one's powerful, because it allows you to set up multi-level approval workflows by chaining rules together. For example, in a larger organization, getting the approval from a department manager might not be enough, and a higher-level VP must also sign off. There's nothing to stop you from using and or or in conjunction with multiple order.approved checks, if that's what's needed to support your flow. In fact, all valid elements of rule expressions can be mixed & matched as needed, allowing for very sophisticated rules to be supported: (order.Total > 20 and order.approved('rule_id_1')) or (not item.any(ProductID = 'QQQ') and approved('rule_id_2')) A word of caution: Rules are easy to write and very powerful, but can be tricky to debug when they don't work quite like you thought they would. While you can write very complex expressions, don't get more fancy with them than you need to. In some cases it might make sense to break a complex rule into 2 or more simpler rules. As always, we're here to help if you need guidance. What else can I do with this? Now that you have a better understanding of the power of rules, you might be wondering what other areas of the platform might we apply them to. Here are a few ideas currently being kicked around: Custom validation (upon creating/editing things) Time-based approval rules (aggregated totals over past week/month/quarter, etc.) Applying discounts/markups Determining coupon eligibility Replenish inventory Fire off a notification via Webhooks In short, order approvals are just the beginning. We envision this new rules engine playing a key role in our \"Flexibility over Features\" platform strategy. Stay tuned!","tags":"Blog Posts","url":"https://ordercloud-api.github.io/release-notes/rules-engine-has-arrived.html"},{"title":"API v1.0.20.0 Release Notes","text":"Released to Prod on Friday, June 10th, 2016 at 8 PM CST. Changelog XP has been added to Cost Center endpoints. List routes for /me order will now mirror admin order routes with respect to requiring incoming/outgoing. Further, the rules of visibility have changed with the four order list routes in the interest of simplicity: orders/outgoing orders from my company (submitted only unless UnsubmittedOrderReader role) orders/incoming orders to my company (submitted only unless UnsubmittedOrderReader role) me/orders/outgoing orders created, approved, or declined by me me/orders/incoming orders awaiting my approval For Approval Rules, approved(ruleid) has been changed to order.approved(ruleid) Previously, admin address routes allowed you to see all addresses assigned to the buyer company AND your own private addresses. In order to simplify the visibility rules for admin routes (like with orders), private addresses are now only visible through /me routes.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.20.0-release-notes.html"},{"title":"API v1.0.19.0 Release Notes","text":"Released to Prod on Tuesday, May 31st, 2016 at 8 PM CST. Changelog Route params have been added to webhooks. An object has been added that contains the values from the routeparams. A small number of bug fixes also went out with this release.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.19.0-release-notes.html"},{"title":"API v1.0.18.0 Release Notes","text":"Released to Prod on Wednesday, May 25th, 2016 at 8 PM CST. Changelog The API now has elevated security integration. 3rd party systems now have the ability to perform elevated security operations. This means that we can grant them specific access that is not accessible by the (buyer) client. The Rules Engine has been updated to replace the item object with items aggregate function. The item object has been replaced with items that contains aggregate functions allowing you do this: items.any(CostCenter = 'XYZ') instead of this: item.CostCenter = 'XYZ' This supports four such aggregate functions: items.any(subexpression) - returns true/false indicating whether any items match subexpression items.all(subexpression) - returns true/false indicating whether any items match subexpression items.quantity(subexpression) - returns total quantity of items matching subexpression items.total(subexpression) - returns price total of all items matching subexpression Upon sending a webhook, an access token is now appended to the outbound web hook call. If a web hook receiver needs to perform actions on behalf of that user with elevated claims, they can now use this token to do so. A nullable field has been added to webhooks called ElevatedClaimsList containing a comma separated list of Claims. Several improvements have been made to the Dev Center to allow management of the webhooks from with the Dev Center UI. Several bug fixes were also deployed with this release.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.18.0-release-notes.html"},{"title":"API v1.0.17.0 Release Notes","text":"Released to Prod on Friday, May 20th, 2016 at 9 PM CST. Changelog Approval rules have been updated significantly in this release. This release includes the new ApprovalRule data model (with full admin-side CRUD endpoints), support for a wide variety of expressions, and support for the actual buyer-side flow, including (legacy) email messaging. There will be an approval rules blog post in the near future that will cover this more in-depth. The API route for Order listing has changed. When listing orders as a Seller user, you must now specify incoming or outgoing in the route, rather than in the query string. For example: v1/orders/incoming This does NOT apply to me/orders - outgoing is always assumed there. It only applies to admin routes, such as incoming orders for sellers and outgoing orders for approving buyer users. Apps will need to be updated accordingly, and make sure you're using the latest version of the SDK IsReportingGroup and IsApprovingGroup have been removed from the UserGroup object. This release also contains several bug fixes.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.17.0-release-notes.html"},{"title":"Four Reasons You Should Stop Using PUT For Updates","text":"Here's a question we hear often: To update an existing resource , when should I use `PUT` and when should I use ``PATCH`` ? TL;DR Always use PATCH . PATCH has several distinct advantages over PUT when it comes to updating things: PUT requires sending the entire object, hence a larger payload over the network. With PATCH , if you only want to change one or a few fields, you only need to send those fields. You often do not have the entire object available to send, in which case PUT requires that you first do a GET. With PATCH , all you need is the object's ID, and you can often avoid the extra API call. In some cases, PUT can have unintended side-effects related to properties you don't want to change. For example, some properties have default values, often inherited from some parent object, that can be overwritten. When you do a GET on such a resource, you'll get the default if it hasn't been overwritten. If you then change some other property and do a PUT , you're unintentionally overriding the inherited value with an explicit one. Now if the default value on the parent changes, that change won't flow to the child as expected. If multiple users can modify the same resources, you could run into concurrency issues with PUT . For example, suppose user A wants to modify a product's quantity multiplier while user B wants to modify the same product's description. Both users have done a GET and have the product's JSON representation and modify it. If user A PUT s their change first, then user B will inadvertently revert the quantity multiplier change when they send their PUT . With PATCH , user A can send only the quantity multiplier change and user B can send just the updated description, and they are at no risk of a conflict. All these warnings of great peril beg the question: When should you use PUT ? These are the situations where using PUT makes sense: You want to create a new resource, and you are providing the ID. Note that you need only provide that ID in the URI. In REST terms, you're basically saying \"I have this new object and I know where I want to put it.\" Conversely, use POST when you want the ID to be auto-generated by the platform, i.e. you want us to decide where to \"put\" it.) You want to completely replace an object with another. In other words, an object has the same ID (location), but in real world terms it is a different thing. This is a rare case. The object does not have an ID, rather its identity is comprised of other values. These objects typically represent relationships; assignments are a good example. You usually don't even have to remember this rule because PUT is often the only verb available for writing to such endpoints. PUT actually has a few nice qualities when used in the above scenarios: PUT is idempotent, i.e. you shouldn't need to check if it has already been called, because calling it a second time will leave the resource in exactly the same state as calling it the first time. ( POST , on the other hand, generally creates a new resource with each successive call.) You generally don't have to worry about checking for existence. For example, if you want to assign a user to a group, you don't need to worry about creating a duplicate assignment - just PUT the assignment and it will either create a new one or overwrite the existing one. Summary Use POST when... Use PUT when... Use PATCH when... - You want to create a new resource where WE (the platform) are generating the ID. The new ID will be returned in the response body (as part of the full object), and the URI of the new resource will be returned in the Location response header. - You want to create a new resource where YOU are providing the ID, use PUT . (No need to include the ID in the request body; it's in the URI.) - You want to update an existing resource. - You want to completely replace a resource with another (same ID), use PUT . This is not common. - You want to update an existing resource. - You want to \"move\" a resource. The old ID goes in the URI; the new one in the request body. In case you are a more visual thinker, here is an infographic that can help you make the right decision:","tags":"blog-posts","url":"https://ordercloud-api.github.io/release-notes/using-put-for-updates.html"},{"title":"API v1.0.16.0 Release Notes","text":"Released to Prod on Wednesday, May 4th, 2016 at 9 PM CST. Changelog Buyer users can now can get a list of the products assigned to themselves. This used to require multiple API calls.This is now a single call. There is now the ability to list security profiles in the API itself and not just in DevCenter (as before). When logged in as a buyer user you can now list their assigned security profiles There is now the ability to create personal addresses (billing and shipping) outside the organization. There is now the ability to create a personal list of saved credit cards outside the organization. Users can now add, update, and delete personal credit cards. Shipment XP - XP can now be used on Shipments Address XP - XP can now be used on Addresses. API Client XP - XP can now be used on a client organization. There are now more advanced search and filtering capabilities available on Addresses, Credit Cards, Specs, and Buyer Categories. This new search capability allows for more advanced filtering and fuzzy searches on lists. Take a look at the new, searchable attributes here: https://testdevcenter.ordercloud.io/docs#Categories_List The API has been updated to allow for Anonymous Shopping within the OrderCloud platform. This update allows for much more flexibility in the buyer user workflow. In the past, buyer users had to be registered in order to purchase products. Now, they can go through the entire shopping workflow without signing in. Spec Options can now be designated as the Default Spec Option for a Spec. There is now the ability to create registration off of a temp user. A user can start with a temp user session and when they choose to profile themselves, a new user based on the template is created. Temp users can create an order but nothing else on Me. It is now impossible for a temp user to create Me data outside of an order. A SpecCount can now be shown to designate how many options are set up for a particular Spec. The Docs section of Devcenter has been reorganized to better reflect how people are actually using the API. We fixed a bug so that users can now filter on XP in the /me endpoint lists. Multiple bug fixes were also included in this release.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.16.0-release-notes.html"},{"title":"API v1.0.15.0 Release Notes","text":"Released to Prod on Friday, April 15th, 2016 at 8 PM CST. Changelog We've fixed a bug where, if you searched a list on XP, you sometimes got duplicate results. We've fixed a bug where, if you are an Admin User, you couldn't update the line items on an order for a Buyer User. This is an uncommon scenario, as generally an Admin user would impersonate a Buyer User to make an order on behalf of the Buyer user, but some integrations use an Admin User directly.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.15.0-release-notes.html"},{"title":"API v1.0.14.1 Release Notes","text":"Released to Prod on Monday, April 11th, 2016 at 8 PM CST. Bug Fixes Duplicate error when creating categories in different buyers","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.14.1-release-notes.html"},{"title":"Flexibility Over Features","text":"\"That's an integration concern.\" It's a phrase I utter often when new platform features are suggested. Although I try not to utter it on days I need to leave early. Some might question my motives. When I think about Four51's transformation from a SaaS company to a PaaS company, I'm often reminded of why we embarked on this journey in the first place. I think I can sum it up in 3 words: too many checkboxes. (You thought I was going to say flexibility over features. I'll get to it.) Our SaaS app simply couldn't do enough things so satisfy everyone's needs. Custom themes on the buyer side weren't enough. Long lists of configuration options on the admin side (those pesky checkboxes) became daunting, and still didn't provide all the custom behavior needed. Simply put, B2B is hard. Much harder than B2C, because there is much greater variability in requirements from customer to customer. We needed a better way, but without abandoning our commitment to the single-instance, multi-tenant, cloud-hosted architecture that's served us (and our customers) so well since before The Cloud was even a thing. So the decision was made to chop the head off the SaaS product and expose the entire data model and its behavior via a RESTful API. We now offer what we believe is the \"sweet spot\" between SasS and custom development. Now, we didn't simply kick the old UI to the curb and say \"here ya go world, go figure it out.\" We actually ramped up our development team and invested heavily in UI components, integration components, SDKs in multiple languages, \"seed\" applications, extensive documentation and tutorials, and a suite of tools under our Dev Center umbrella to enable things like GitHub integration and one-click app deployments. Custom apps in record time, all built atop of a proven, time-tested platform. But going down this path required a change in mindset, especially as it applies to the core platform. We're no longer a car; we're an engine. If you want top-of-the-line headlights, you can have them, but there there others who specialize in them and make them better than we ever could. (Besides, how deep under the hood do you want go to change a bulb?) What we do well is B2B eCommerce and order management. This has been our core competency for over 15 years. We've discovered countless nuances and solved them via constant evolution of our data model. Anything outside that domain is subject to re-evaluation. Take a seemingly simple example: email. Sure, we can build and send off an email directly from the platform in a few lines of code (and we did that for years). But can we offer a template management system or maintain a whitelist status (there's more to this stuff than you might imagine) to rival MailChimp? No. MailChimp does email better than we ever could, and they offer their services via their own RESTful API. Four51's integration engineers work tirelessly to select the best experts in their respective domains and provide out-of-the-box integration components to our customers. Do all these newfound \"integration concerns\" mean the core platform is \"done\"? Not by a long shot. Mature, yes. Done, no. We've simply redefined how we prioritize enhancements to it. Which brings us to Flexibility Over Features. It's a mantra that guides our platform roadmap and keeps us focused on what we do best. As flexible as our data model is, we still encounter situations where it's too rigid to solve certain problems elegantly. Removing constraints and broadening the possibilities of how our data model can be utilized receive top priority on our platform agenda. Enough with mantras and buzzwords and other abstract rantings. What are some real-world examples where we've put this idea to work? Extended Properties, A.K.A. \"xp\", is a perfect example. Most objects in the data model now include some core set of attributes, along with an extension attribute called xp. For example, a User object contains ID, FirstName, LastName, Email, and about a half dozen other attributes. But it doesn't include Gender, because presumably that's not a useful datapoint in the vast majority of B2B scenarios. If it's relevant in yours, no problem - just add it: user.xp.Gender = \"female\" Of course, the platform has no inherent knowledge of what \"Gender\" means, so it provides no special behavior around it, but it's happy to accept this conjured-up attribute, store it, index it, and make it searchable/sortable when you get a list of Users. Need specialized behavior around it? That's an integra….you get the idea. Our roadmap is loaded with ideas that fit the Flexibility Over Features mantra. Currently in the works is a robust new system of Webhooks, which will provide a powerful new way to integrate with external systems via HTTP. Essentially, these systems will be able to subscribe to events that occur within the platform (order submitted, product created, etc.) and respond to them in near real time. You can already \"pull\" data from the platform by calling the API; think of this as a \"push\" mechanism, where you get what you want from the platform when it occurs, avoiding the need to periodically poll the API. Another major project in the works is a new Rules Engine. Its first application will be a massive overhaul of Order Approvals, adding a greater degree of robustness and flexibility to this core feature than we've ever dreamed up in the past. It'll support text-based logic expressions (no CompSci degree required), arbitrary approval workflows, time-based rules against aggregated totals, and much more. Look for it in the coming months. OrderCloud is constantly evolving. But we've learned that we don't need to be experts at everything. We believe the best B2B solutions on the planet will not be built from scratch nor offered out-of-the box via SaaS. Rather, they'll be assembled out of distributed, best-in-breed components. We're the engine. We don't make tires or steering wheels or leather-upholstered bucket seats. But we can help you assemble all the best parts, and we think the result will be the shiniest, fastest car on the block.","tags":"blog-posts","url":"https://ordercloud-api.github.io/release-notes/flexibility-over-features.html"},{"title":"So You Think You Know Your XP","text":"This is not intended to be an introductory post. It's less about learning something you don't know and more about un-learning something you think you know. Let's start with a pop quiz. What is XP? An operating system recommended by 4 out of 5 OrderCloud.io developers. An arbitrary JSON object that can be attached to any OrderCloud.io model. Something you gain 20 of by throwing a curveball in Pokémon Go. None of the above. The correct answer of course is 4 . If you thought it was 1 or 3 , that's understandable. (It's only 3 out of 5, and a curveball is only good for 10.) If you answered 2 , welcome to your un-learning session. Ok, so technically speaking 2 is technically true, technically. But that definition will cloud your thinking during the all-important data modeling phase of your app's development. First off, saying it's a JSON object is like saying Order.Status is a JSON property. Sure, that's how it's represented in the API, but it tells you nothing about what it is conceptually. Recall that XP stands for \"e X tended Properties\". So let's try this definition: A mechanism for adding properties to an object that my conceptual model needs but are not natively supported in OrderCloud.io. That's much better. It gets to the essence of what XP is and, perhaps more importantly, what it isn't. Our User model has FirstName , LastName , and Email , but it doesn't have FavoriteColor . If that's an important data point for your app, just add it: user.xp.FavoriteColor = \"purple\" . We'll store it and even index it, so later you can ask for a list of all users whose favorite color is purple, and we'll send it to you faster than you can say \"Skol Vikings\". But XP isn't a dumping ground for large, deeply nested objects. It's highly optimized for the \"add a few extra data points\" scenario and nothing more. With that in mind, let's go over some basic guidelines and best practices associated with XP. Know the data model, and use XP as a last resort. If you think XP properties are second-class citizens to native properties, well, they sort of are. They're actually rather dumb. There's no validation, no behavior, no referential integrity. Just data in, data out. Are you familiar with all the existing properties of the model you want to extend? Do you know their purpose and behavior? Are you aware that IDs are writable ? That is perhaps one of the most underrated features of the API. If you're using some back-office system as the master record for orders, you don't need to add order.xp.MyBackOfficeMasterRecordID . Just write it to order.ID . Avoid storing big, text-y data. In the coming weeks we'll be imposing some new size limits on XP. Don't use it to store a blog. Also, XP is not optimized for full-text or natural language search. Things like Product.Description and Order.Comment s are better suited for this. Think smallish data points for XP. Avoid storing deeply nested objects. Think in terms of simple name/value pairs. You are allowed to store arbitrarily deep objects, but do so sparingly. A good example might be a Geocoordinates property on an Address . You might want to represent that with Latitude/Longitude sub-properties. Be careful with lists. Lists are dangerous, especially if it's hard to say how long they could get. Something like user.xp.NamesOfPets should be ok. Avoid lists of objects. This again touches on the importance of knowing the data model. Are you sure the object doesn't already have a list of child objects that might fit your needs? Avoid storing repeated \"lookup\" data. We recently discovered that a client had been storing objects like this in XP of every Order submitted through their app: \"MyNestedObject\": { \"ID\": \"xyz123\", \"name\": \"my thing name\", \"description\": \"my lengthy description\" } . In their thousands of processed orders, guess what was true about all orders with the same xp.MyNestedObject.ID ? Yep, they all had the same name and description too. Not only does this make DBAs cry, but it's potentially bad for the end user as well. What if a misspelling was discovered in the description? It would need to be updated in thousands of places. This can be avoided by storing just MyNestedObjectID in order.xp , and storing the lookup data associated with that ID elsewhere. Avoid storing global configuration data. Virtually all apps have some sort of global config data. Ask yourself: do you really need the API to store that for you? Assuming it rarely changes and you don't need to build any sort of UI around changing it, it's perfectly fine to store this along side your front-end code, such as in a JSON object in a js file. Never, ever store highly sensitive data . Don't put passwords in XP . As for credit card numbers, it's not only a bad idea, it's a violation of our terms and conditions. Remember that OrderCloud.io is not a complete solution. You wouldn't tell an end-customer that our API alone is their new commerce solution, point them to Postman or Fiddler and be on your way. But just as a custom front-end needs to be built in order to have something useful, it's quite possible that a great solution will require some additional back-end pieces as well. Fortunately for you, we live in an age of microservices, and if your custom data needs grow beyond bolting a few extra properties onto existing objects, you have a number of great options available in the Cloud. Google's Firebase , Amazon's DynamoDB , and Microsoft's DocumentDB are just a few. When it doubt, ask. We want nothing more than for the apps you build on OrderCloud.io to be a smashing success. To that end, we're here to help. We have both free and paid support options available. Use them if you feel you don't have all the answers you need, especially in the critical early stages of development. We like to tout XP as the poster child of our \"Flexibility over Features\" mantra. But like any tool, it is important to recognize its purpose, as well as its limitations.","tags":"Blog Posts","url":"https://ordercloud-api.github.io/release-notes/so-you-think-you-know-xp.html"},{"title":"API v1.0.14.0 Release Notes","text":"Released to Prod on Tuesday, April 5th, 2016 at 8 PM CST. Changelog We've added some new functionality around how we store credit card and other payment transactions. If your app uses our credit card processing, you'll probably want to check out the documentation on Payments, and make sure everything is working the way you expect. You can now use partial updates ( PATCH calls) to update fields on any model to NULL instead of having to overwrite with some other value! We've changed how you can check if all the line items on an Order are being shipped to the same place. While you could previously set all the line items on an order to the same address by writing to Order.ShippingAddressID , the value was write-only. Now Order.ShippingAddressID will return a non-null value if and only if all the line items on that order have the same shipping address. Check out the documentation for more on this. To go along with the above, if Order.ShippingAddressID is non-null (that is, all the line items are being shipped to the same place), newly added line items will inherit that shipping address. Some performance improvements were made around working with line-items. If your app has a lot of PATCH ing of line items, you'll hopefully notice those improvements.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.14.0-release-notes.html"},{"title":"API v1.0.13.0 Release Notes","text":"Released to Prod on Wednesday, March 16th, 2016 at 8 PM CST. Bug Fixes: Payments: Unable to create, states order is already fully paid Products: Generating variants throws 500 error CostCenterID cannot be set on an ApprovalRule Specs: After variants are generated for a product, the definesVariant is set to false","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.13.0-release-notes.html"},{"title":"Leveraging Extended Properties in the Development of Custom eCommerce Apps","text":"Recently I came across a post from one of my favorite developers and technology thought leaders that centered on how to work with some architecture patterns that drive so much of the development work that occurs today. His name is Rob Conery , and he posts to his blog frequently. I never miss a post, and listen to so much of what he publishes through his terrific podcast, This Developer's Life . In his most recent post, JSONB and PostreSQL: Work Faster By Ditching Migrations he touched on a subject that resonated with our OrderCloud.io API strategy. In particular, how we manage our Extended Properties ( XP ) strategy, and ways to leverage it in the development of custom solutions. Conery touches on the difficulties in choosing ORM patterns and his dislike of them, his love for SQL, and the choice to use good SQL project management, especially when the database begins to grow into a robust and production ready system. His answer, as he's approaching in his latest project, is to work with JSONB at the top level. In doing so he's able to use a schema-less approach to reduce friction and \"nail the idea first\". I found his thought process enlightening. With OrderCloud.io, we've actually enabled this very development process. Our data model is the product of over 16 years worth of intellectual property in B2B Commerce and Order Management. Add to that 100% exposure via our REST API , and we believe we have the most robust and flexible B2B solution in the industry. Still, we recognize that it can't cover every conceivable scenario. We can't predict every column in every table that your hypothetical database might need. That's why we created our own schema-less solution with Extended Properties (XP) and exposed it on every API resource. We might not have Product.YourSpecialDataPoint , but we certainly do have Product.xp.YourSpecialDataPoint . In your development projects you will encounter needs to customize the data model. With more rigid platforms like Magento you're going to face challenges that require extensive work and timely development efforts. Our Extended Properties strategy allows you to overcome those obstacles and continue to create and develop fast. Additionally, leveraging the tools in the OrderCloud.io Dev Center enables you to collaborate with our Architects and Developers to enhance the data model through suggestions. Developers are now a first-class customer. We seek out and encourage suggestions and so many of those suggestions will be born out of the usage of XP and the power it provides. Learn more about OrderCloud.io Extended Properties here, or get started building on the OrderCloud.io Dev Center for free here .","tags":"Blog Posts","url":"https://ordercloud-api.github.io/release-notes/leverage-xp.html"},{"title":"API v1.0.12.0 Release Notes","text":"Released to Prod on Thursday, March 3rd, 2016 at 8 PM CST. New Features: Payment Types allow using multiple payment types on a single order Generate Variants Breaking Changes: DefinesVariant has been moved from the Spec model to the Product-Spec Assignment model Generating Variants There are 4 things needed to create a product with variants Spec(s) Spec options a spec product relationship that sets Defines variant = true an explicit call to POST {productID}/variants/generate it's pretty simple once they're initially set up. Take the ubiquitous shirt example Specs size small, large color red, black spec - product = size/shirt/definesvariant = true spec - product = color/shirt/definesvariant = true a call to POST {productID}/variants/generate will generate 4 variants - small red - small black - large red - large black Adding specs is pretty simple add color:blue and a call to POST {productID}/variants/generate will ADD the missing variants 1 small blue 2 large blue The tricky bit starts when a spec is removed. if color is deleted, all the variants are not relevant because color is built into all of them. Delete color and add logo to our shirt. So that this is the config of shirt: size: small,large logo: logoA,logoB and a call to POST {productID}/variants/generate will only ADD new variants and you'll have 8. Even with the spec deleted, the dependant variant can still exist, it's just not tied to the deleted spec. This is important if that variant is already on an order. - small logoA - small logoB - large logoA - large logoB - small red - small black - large red - large black if your intention is to start over and reset the variants, there is the spec nuclear option: POST {productID}/variants/generate?overwriteExisting=true This will DELETE ALL variants and regenerate them based on the current spec configurations. If a variant is on a lineitem, it will be removed. The previous example deletes color and adds logo. calling overwriteExisting=true will result in - small logoA - small logoB - large logoA - large logoB The key to overwriteExisting=true is that it will always delete all variaints and regenerate regardless of the change to the spec configuration.","tags":"API Release Notes","url":"https://ordercloud-api.github.io/release-notes/1.0.12.0-release-notes.html"}]}